name: Production Database Migration

on:
  push:
    branches: [main]
    paths:
      - 'prisma/schema.prisma'
      - 'prisma/migrations/**'
  workflow_dispatch:
    inputs:
      migration_type:
        description: 'Type of migration'
        required: true
        default: 'auto'
        type: choice
        options:
          - auto
          - manual-review
          - rollback
      rollback_target:
        description: 'Migration name to rollback to (only for rollback type)'
        required: false
        type: string

env:
  NODE_VERSION: '20'

jobs:
  detect-changes:
    name: Detect Migration Changes
    runs-on: ubuntu-latest
    outputs:
      has_schema_changes: ${{ steps.changes.outputs.schema }}
      has_migration_files: ${{ steps.changes.outputs.migrations }}
      migration_needed: ${{ steps.check.outputs.migration_needed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            schema:
              - 'prisma/schema.prisma'
            migrations:
              - 'prisma/migrations/**'

      - name: Determine if migration needed
        id: check
        run: |
          if [[ "${{ steps.changes.outputs.schema }}" == "true" || "${{ steps.changes.outputs.migrations }}" == "true" ]]; then
            echo "migration_needed=true" >> $GITHUB_OUTPUT
          else
            echo "migration_needed=false" >> $GITHUB_OUTPUT
          fi

  validate-migration:
    name: Validate Migration Safety
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.migration_needed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm run db:prisma:generate

      - name: Validate schema syntax
        run: npx prisma validate

      - name: Check for destructive changes
        run: |
          echo "üîç Checking for potentially destructive migration patterns..."
          
          # Check for DROP TABLE, DROP COLUMN, or other destructive operations
          if find prisma/migrations -name "*.sql" -newer prisma/migrations/migration_lock.toml -exec grep -l "DROP\s\+\(TABLE\|COLUMN\)\|ALTER\s\+TABLE.*DROP" {} \; | head -1; then
            echo "‚ö†Ô∏è  WARNING: Destructive migration detected!"
            echo "Please review the migration carefully before proceeding."
            echo "Consider adding a manual review step or data backup."
          else
            echo "‚úÖ No obviously destructive patterns found."
          fi

  run-migration:
    name: Run Production Migration
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-migration]
    if: |
      needs.detect-changes.outputs.migration_needed == 'true' && 
      (github.event_name == 'push' || github.event.inputs.migration_type != 'manual-review')
    environment: 
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm run db:prisma:generate

      - name: Check migration status
        run: |
          echo "üîç Checking current migration status..."
          npx prisma migrate status --schema=prisma/schema.prisma
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_UNPOOLED }}

      - name: Create database backup point
        if: github.event.inputs.migration_type != 'rollback'
        run: |
          echo "üìù Creating migration log entry..."
          echo "Migration started at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> migration.log
          echo "Git commit: ${{ github.sha }}" >> migration.log
          echo "Triggered by: ${{ github.event_name }}" >> migration.log

      - name: Run database migration
        if: github.event.inputs.migration_type != 'rollback'
        run: |
          echo "üöÄ Running database migration..."
          pnpm run db:migrate:deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_UNPOOLED }}

      - name: Handle rollback
        if: github.event.inputs.migration_type == 'rollback'
        run: |
          echo "‚è™ Rolling back to: ${{ github.event.inputs.rollback_target }}"
          # Note: Prisma doesn't have automatic rollback, this would need custom logic
          echo "Manual rollback required - see migration documentation"
          exit 1

      - name: Verify migration success
        run: |
          echo "‚úÖ Verifying migration status..."
          npx prisma migrate status --schema=prisma/schema.prisma
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_UNPOOLED }}

      - name: Update migration log
        if: success()
        run: |
          echo "Migration completed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> migration.log
          echo "Status: SUCCESS" >> migration.log

      - name: Trigger Vercel redeployment
        if: success()
        run: |
          echo "üîÑ Triggering Vercel redeployment..."
          curl -X POST "${{ secrets.VERCEL_DEPLOY_HOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d '{"reason": "Database migration completed"}'

  notification:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-migration, run-migration]
    if: always() && needs.detect-changes.outputs.migration_needed == 'true'
    steps:
      - name: Send success notification
        if: needs.run-migration.result == 'success'
        run: |
          echo "‚úÖ Database migration completed successfully!"
          echo "Commit: ${{ github.sha }}"
          echo "Environment: Production"

      - name: Send failure notification
        if: needs.run-migration.result == 'failure'
        run: |
          echo "‚ùå Database migration failed!"
          echo "Commit: ${{ github.sha }}"
          echo "Please check the logs and consider manual intervention."
          exit 1

  manual-review:
    name: Manual Review Required
    runs-on: ubuntu-latest
    needs: [detect-changes, validate-migration]
    if: |
      needs.detect-changes.outputs.migration_needed == 'true' && 
      github.event.inputs.migration_type == 'manual-review'
    steps:
      - name: Request manual review
        run: |
          echo "üîç Manual review requested for migration"
          echo "Please review the following:"
          echo "1. Check migration files in prisma/migrations/"
          echo "2. Verify no destructive operations"
          echo "3. Consider data backup if needed"
          echo "4. Re-run workflow with 'auto' type when ready"
