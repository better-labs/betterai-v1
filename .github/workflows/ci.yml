name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm run db:prisma:generate

      - name: Run ESLint
        run: pnpm run lint
        continue-on-error: false

      - name: Check TypeScript
        run: pnpm run typecheck
        continue-on-error: false

      - name: Check for Prisma serialization violations
        run: |
          echo "üîç Checking for Prisma import violations..."
          
          # Check if any client components import Prisma directly
          if find app components -name "*.tsx" -exec grep -l "use client" {} \; | xargs grep -l "@prisma/client" 2>/dev/null; then
            echo "‚ùå ERROR: Client components importing Prisma detected!"
            echo "These files should use *Serialized query methods instead:"
            find app components -name "*.tsx" -exec grep -l "use client" {} \; | xargs grep -l "@prisma/client" 2>/dev/null
            exit 1
          else
            echo "‚úÖ No Prisma import violations found in client components"
          fi

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build:ci
        env:
          # Use a mock database URL for build (Prisma generate only)
          DATABASE_URL: "postgresql://mock:mock@localhost:5432/mock"

      - name: Cache build output
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
            .next/static
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-typecheck
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        run: pnpm run db:prisma:generate

      - name: Run tests
        run: pnpm run test --run
        env:
          # Use a mock database URL for tests
          DATABASE_URL: "postgresql://mock:mock@localhost:5432/mock"

  security-check:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: Check for secrets in code
        run: |
          echo "üîç Checking for potential secrets..."
          
          # Check for common secret patterns (excluding node_modules and .git)
          if grep -r -E "(api_key|secret_key|private_key|password|token)" --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules --exclude-dir=.git --exclude-dir=.next . | grep -v "// @ts-ignore" | grep -v "process.env" | head -5; then
            echo "‚ö†Ô∏è  WARNING: Potential secrets found in code. Please review."
            echo "Make sure to use environment variables for sensitive data."
          else
            echo "‚úÖ No obvious secrets found in source code"
          fi

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build, test, security-check]
    if: always()
    steps:
      - name: Check CI status
        run: |
          echo "## CI Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.lint-and-typecheck.result }}" == "success" ]]; then
            echo "‚úÖ **Lint & Type Check**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Lint & Type Check**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "‚úÖ **Build**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Build**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.test.result }}" == "success" ]]; then
            echo "‚úÖ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.security-check.result }}" == "success" ]]; then
            echo "‚úÖ **Security Check**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Security Check**: Issues found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Prisma Serialization Protection" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ ESLint rules active to prevent raw Prisma imports in client components" >> $GITHUB_STEP_SUMMARY

      - name: Fail workflow if critical jobs failed
        if: |
          needs.lint-and-typecheck.result == 'failure' ||
          needs.build.result == 'failure' ||
          needs.test.result == 'failure'
        run: |
          echo "‚ùå Critical CI jobs failed!"
          exit 1