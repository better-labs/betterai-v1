generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  jsonProtocol = "true"
  noHints = "true"
}

// GitHub Actions Migration Test - This comment triggers workflow

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl =env("SHADOW_DATABASE_URL")
}

model AiModel {
  id                  String    @id
  name                String
  created             Int?
  description         String?
  architecture        Json?
  topProvider         Json?     @map("top_provider")
  pricing             Json?
  canonicalSlug       String?   @map("canonical_slug")
  contextLength       Int?      @map("context_length")
  huggingFaceId       String?   @map("hugging_face_id")
  perRequestLimits    Json?     @map("per_request_limits")
  supportedParameters Json?     @map("supported_parameters")
  updatedAt           DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([canonicalSlug], map: "idx_ai_models_canonical_slug")
  @@index([contextLength], map: "idx_ai_models_context_length")
  @@index([name], map: "idx_ai_models_name")
  @@map("ai_models")
}

model Event {
  id               String     @id
  title            String
  description      String?
  slug             String?
  icon             String?
  tags             Json?
  volume           Decimal?   @default(0) @db.Decimal
  endDate          DateTime?  @map("end_date") @db.Timestamp(6)
  marketProvider   String?    @map("market_provider")
  updatedAt        DateTime?  @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  startDate        DateTime?  @map("start_date") @db.Timestamp(6)
  image            String?
  category         Category?
  providerCategory String?    @map("provider_category")
  eventTags        EventTag[]
  markets          Market[]

  @@index([category], map: "idx_events_category")
  @@index([endDate], map: "idx_events_end_date")
  @@index([slug], map: "idx_events_slug")
  @@index([startDate], map: "idx_events_start_date")
  @@index([volume], map: "idx_events_volume")
  @@map("events")
}

/// Canonical tags normalized from providers (e.g., Polymarket)
model Tag {
  id                String     @id
  label             String
  slug              String?
  forceShow         Boolean?   @map("force_show")
  providerUpdatedAt DateTime?  @map("provider_updated_at") @db.Timestamp(6)
  provider          String?
  events            EventTag[]

  @@index([label], map: "idx_tags_label")
  @@index([slug], map: "idx_tags_slug")
  @@map("tags")
}

/// Many-to-many join between events and tags
model EventTag {
  eventId String @map("event_id")
  tagId   String @map("tag_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_tags_event_id_events_id_fk")
  tag     Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "event_tags_tag_id_tags_id_fk")

  @@id([eventId, tagId])
  @@index([tagId], map: "idx_event_tags_tag_id")
  @@map("event_tags")
}

model ResearchCache {
  id            Int       @id @default(autoincrement())
  marketId      String?   @map("market_id")
  modelName     String    @map("model_name")
  systemMessage String?   @map("system_message")
  userMessage   String    @map("user_message")
  response      Json?
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  market        Market?   @relation(fields: [marketId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "research_cache_market_id_markets_id_fk")

  @@index([createdAt], map: "idx_research_cache_created_at")
  @@index([marketId], map: "idx_research_cache_market_id")
  @@map("research_cache")
}

model Market {
  id                 String              @id
  question           String
  eventId            String              @map("event_id")
  outcomePrices      Decimal[]           @map("outcome_prices") @db.Decimal
  volume             Decimal?            @default(0) @db.Decimal
  liquidity          Decimal?            @default(0) @db.Decimal
  description        String?
  active             Boolean?
  closed             Boolean?
  endDate            DateTime?           @map("end_date") @db.Timestamp(6)
  updatedAt          DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  slug               String?
  startDate          DateTime?           @map("start_date") @db.Timestamp(6)
  resolutionSource   String?             @map("resolution_source")
  outcomes           String[]
  icon               String?
  image              String?
  event              Event               @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "markets_event_id_events_id_fk")
  predictionChecks   PredictionCheck[]
  predictions        Prediction[]
  predictionSessions PredictionSession[]
  researchCache      ResearchCache[]
  userWatchlist      UserWatchlist[]

  @@index([endDate], map: "idx_markets_end_date")
  @@index([eventId], map: "idx_markets_event_id")
  @@index([slug], map: "idx_markets_slug")
  @@index([startDate], map: "idx_markets_start_date")
  @@index([volume], map: "idx_markets_volume")
  @@map("markets")
}

model Prediction {
  id                    Int                @id @default(autoincrement())
  userMessage           String             @map("user_message")
  marketId              String             @map("market_id")
  predictionResult      Json               @map("prediction_result")
  modelName             String?            @map("model_name")
  systemPrompt          String?            @map("system_prompt")
  aiResponse            String?            @map("ai_response")
  createdAt             DateTime?          @default(now()) @map("created_at") @db.Timestamp(6)
  outcomes              String[]
  outcomesProbabilities Decimal[]          @map("outcomes_probabilities") @db.Decimal
  userId                String?            @map("user_id")
  experimentTag         String?            @map("experiment_tag")
  experimentNotes       String?            @map("experiment_notes")
  sessionId             String?            @map("session_id")
  predictionChecks      PredictionCheck[]
  market                Market             @relation(fields: [marketId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "predictions_market_id_markets_id_fk")
  user                  User?              @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "predictions_user_id_users_id_fk")
  session               PredictionSession? @relation(fields: [sessionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "predictions_session_id_prediction_sessions_id_fk")

  @@index([createdAt], map: "idx_predictions_created_at")
  @@index([marketId], map: "idx_predictions_market_id")
  @@index([userId], map: "idx_predictions_user_id")
  @@index([experimentTag], map: "idx_predictions_experiment_tag")
  @@index([sessionId], map: "idx_predictions_session_id")
  @@map("predictions")
}

model PredictionCheck {
  id                Int         @id @default(autoincrement())
  predictionId      Int?        @map("prediction_id")
  marketId          String?     @map("market_id")
  aiProbability     Decimal?    @map("ai_probability") @db.Decimal
  marketProbability Decimal?    @map("market_probability") @db.Decimal
  delta             Decimal?    @db.Decimal
  absDelta          Decimal?    @map("abs_delta") @db.Decimal
  marketClosed      Boolean?    @map("market_closed")
  createdAt         DateTime?   @default(now()) @map("created_at") @db.Timestamp(6)
  market            Market?     @relation(fields: [marketId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prediction_checks_market_id_markets_id_fk")
  prediction        Prediction? @relation(fields: [predictionId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "prediction_checks_prediction_id_predictions_id_fk")

  @@index([createdAt], map: "idx_prediction_checks_created_at")
  @@index([marketId], map: "idx_prediction_checks_market_id")
  @@index([predictionId], map: "idx_prediction_checks_prediction_id")
  @@map("prediction_checks")
}

model User {
  id                  String              @id
  email               String?
  walletAddress       String?             @map("wallet_address")
  username            String?
  avatar              String?
  createdAt           DateTime?           @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  credits             Int                 @default(100)
  creditsLastReset    DateTime?           @default(now()) @map("credits_last_reset") @db.Timestamp(6)
  totalCreditsEarned  Int                 @default(100) @map("total_credits_earned")
  totalCreditsSpent   Int                 @default(0) @map("total_credits_spent")
  predictions         Prediction[]
  predictionSessions  PredictionSession[]
  watchlist           UserWatchlist[]

  @@index([email], map: "idx_users_email")
  @@index([walletAddress], map: "idx_users_wallet_address")
  @@index([username], map: "idx_users_username")
  @@index([credits], map: "idx_users_credits")
  @@index([creditsLastReset], map: "idx_users_credits_reset")
  @@map("users")
}

model PredictionSession {
  id              String                  @id @default(cuid())
  userId          String                  @map("user_id")
  marketId        String                  @map("market_id")
  selectedModels  String[]                @map("selected_models")
  status          PredictionSessionStatus @default(INITIALIZING)
  step            String?
  error           String?
  createdAt       DateTime                @default(now()) @map("created_at") @db.Timestamp(6)
  completedAt     DateTime?               @map("completed_at") @db.Timestamp(6)
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "prediction_sessions_user_id_users_id_fk")
  market          Market                  @relation(fields: [marketId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "prediction_sessions_market_id_markets_id_fk")
  predictions     Prediction[]

  @@index([userId], map: "idx_prediction_sessions_user_id")
  @@index([marketId], map: "idx_prediction_sessions_market_id")
  @@index([status], map: "idx_prediction_sessions_status")
  @@index([createdAt], map: "idx_prediction_sessions_created_at")
  @@map("prediction_sessions")
}

model UserWatchlist {
  id       Int      @id @default(autoincrement())
  userId   String   @map("user_id")
  marketId String   @map("market_id")
  addedAt  DateTime @default(now()) @map("added_at") @db.Timestamp(6)
  market   Market   @relation(fields: [marketId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_watchlist_market_id_markets_id_fk")
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_watchlist_user_id_users_id_fk")

  @@unique([userId, marketId], map: "uq_user_watchlist_user_market")
  @@index([userId], map: "idx_user_watchlist_user_id")
  @@index([marketId], map: "idx_user_watchlist_market_id")
  @@index([addedAt], map: "idx_user_watchlist_added_at")
  @@map("user_watchlist")
}


enum Category {
  ELECTIONS             @map("elections")
  GEOPOLITICS           @map("geopolitics")
  ECONOMY               @map("economy")
  FINANCIAL_MARKETS     @map("financial_markets")
  CRYPTOCURRENCY        @map("cryptocurrency")
  SCIENCE_TECHNOLOGY    @map("science_technology")
  BUSINESS              @map("business")
  SPORTS                @map("sports")
  CULTURE_ENTERTAINMENT @map("culture_entertainment")
  CLIMATE_ENVIRONMENT   @map("climate_environment")
  OTHER                 @map("other")
}

enum PredictionSessionStatus {
  INITIALIZING @map("initializing")
  RESEARCHING  @map("researching")
  GENERATING   @map("generating")
  FINISHED     @map("finished")
  ERROR        @map("error")
}
