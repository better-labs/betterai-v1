generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AiModel {
  id                   String    @id
  name                 String
  created              Int?
  description          String?
  architecture         Json?
  topProvider          Json?     @map("top_provider")
  pricing              Json?
  canonicalSlug        String?   @map("canonical_slug")
  contextLength        Int?      @map("context_length")
  huggingFaceId        String?   @map("hugging_face_id")
  perRequestLimits     Json?     @map("per_request_limits")
  supportedParameters  Json?     @map("supported_parameters")
  updatedAt            DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)

  @@map("ai_models")
}

model Event {
  id              String    @id
  title           String
  description     String?
  slug            String?
  icon            String?
  tags            Json?
  category        Int?
  volume          Decimal?  @default(0) @db.Decimal
  endDate         DateTime? @map("end_date") @db.Timestamp(6)
  marketProvider  String?   @map("market_provider")
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.Timestamp(6)
  startDate       DateTime? @map("start_date") @db.Timestamp(6)
  markets         Market[]

  @@map("events")
}

model MarketQueryCache {
  id             Int       @id @default(autoincrement())
  marketId       String?   @map("market_id")
  modelName      String    @map("model_name")
  systemMessage  String?   @map("system_message")
  userMessage    String    @map("user_message")
  response       Json?
  createdAt      DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  market         Market?   @relation(fields: [marketId], references: [id])

  @@map("market_query_cache")
}

model Market {
  id                 String               @id
  question           String
  eventId            String?              @map("event_id")
  outcomePrices      Decimal[]            @map("outcome_prices") @db.Decimal
  volume             Decimal?             @default(0) @db.Decimal
  liquidity          Decimal?             @default(0) @db.Decimal
  category           String?
  description        String?
  active             Boolean?
  closed             Boolean?
  endDate            DateTime?            @map("end_date") @db.Timestamp(6)
  updatedAt          DateTime?            @updatedAt @map("updated_at") @db.Timestamp(6)
  slug               String?
  startDate          DateTime?            @map("start_date") @db.Timestamp(6)
  resolutionSource   String?              @map("resolution_source")
  outcomes           String[]
  marketQueryCache   MarketQueryCache[]
  event              Event?               @relation(fields: [eventId], references: [id])
  predictions        Prediction[]

  @@map("markets")
}

model Prediction {
  id                Int       @id @default(autoincrement())
  userMessage       String    @map("user_message")
  marketId          String?   @map("market_id")
  predictionResult  Json      @map("prediction_result")
  modelName         String?   @map("model_name")
  systemPrompt      String?   @map("system_prompt")
  aiResponse        String?   @map("ai_response")
  createdAt         DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  probability       Decimal?  @db.Decimal
  market            Market?   @relation(fields: [marketId], references: [id])

  @@map("predictions")
}