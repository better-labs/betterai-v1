generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Canonical category enum stored as readable slugs in DB
enum Category {
  ELECTIONS             @map("elections")
  GEOPOLITICS           @map("geopolitics")
  ECONOMY               @map("economy")
  FINANCIAL_MARKETS     @map("financial_markets")
  CRYPTOCURRENCY        @map("cryptocurrency")
  SCIENCE_TECHNOLOGY    @map("science_technology")
  BUSINESS              @map("business")
  SPORTS                @map("sports")
  CULTURE_ENTERTAINMENT @map("culture_entertainment")
  CLIMATE_ENVIRONMENT   @map("climate_environment")
  OTHER                 @map("other")
}

model AiModel {
  id                  String    @id
  name                String
  created             Int?
  description         String?
  architecture        Json?
  topProvider         Json?     @map("top_provider")
  pricing             Json?
  canonicalSlug       String?   @map("canonical_slug")
  contextLength       Int?      @map("context_length")
  huggingFaceId       String?   @map("hugging_face_id")
  perRequestLimits    Json?     @map("per_request_limits")
  supportedParameters Json?     @map("supported_parameters")
  updatedAt           DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  @@index([canonicalSlug], map: "idx_ai_models_canonical_slug")
  @@index([contextLength], map: "idx_ai_models_context_length")
  @@index([name], map: "idx_ai_models_name")
  @@map("ai_models")
}

model Event {
  id             String    @id
  title          String
  description    String?
  slug           String?
  icon           String?
  image          String?
  tags           Json?
  category       Category?
  volume         Decimal?  @default(0) @db.Decimal
  endDate        DateTime? @map("end_date") @db.Timestamp(6)
  marketProvider String?   @map("market_provider")
  updatedAt      DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  startDate      DateTime? @map("start_date") @db.Timestamp(6)
  markets        Market[]

  @@index([category], map: "idx_events_category")
  @@index([endDate], map: "idx_events_end_date")
  @@index([slug], map: "idx_events_slug")
  @@index([startDate], map: "idx_events_start_date")
  @@index([volume], map: "idx_events_volume")
  @@map("events")
}

model ResearchCache {
  id            Int       @id @default(autoincrement())
  marketId      String?   @map("market_id")
  modelName     String    @map("model_name")
  systemMessage String?   @map("system_message")
  userMessage   String    @map("user_message")
  response      Json?
  createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  market        Market?   @relation(fields: [marketId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "research_cache_market_id_markets_id_fk")

  @@index([createdAt], map: "idx_research_cache_created_at")
  @@index([marketId], map: "idx_research_cache_market_id")
  @@map("research_cache")
}

model Market {
  id               String             @id
  question         String
  eventId          String?            @map("event_id")
  icon             String?
  image            String?
  outcomePrices    Decimal[]          @map("outcome_prices") @db.Decimal
  volume           Decimal?           @default(0) @db.Decimal
  liquidity        Decimal?           @default(0) @db.Decimal
  category         Category?
  description      String?
  active           Boolean?
  closed           Boolean?
  endDate          DateTime?          @map("end_date") @db.Timestamp(6)
  updatedAt        DateTime?          @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  slug             String?
  startDate        DateTime?          @map("start_date") @db.Timestamp(6)
  resolutionSource String?            @map("resolution_source")
  outcomes         String[]
  researchCache    ResearchCache[]
  event            Event?             @relation(fields: [eventId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "markets_event_id_events_id_fk")
  predictions      Prediction[]

  @@index([endDate], map: "idx_markets_end_date")
  @@index([eventId], map: "idx_markets_event_id")
  @@index([slug], map: "idx_markets_slug")
  @@index([startDate], map: "idx_markets_start_date")
  @@index([volume], map: "idx_markets_volume")
  @@map("markets")
}

model Prediction {
  id               Int       @id @default(autoincrement())
  userMessage      String    @map("user_message")
  marketId         String?   @map("market_id")
  predictionResult Json      @map("prediction_result")
  modelName        String?   @map("model_name")
  systemPrompt     String?   @map("system_prompt")
  aiResponse       String?   @map("ai_response")
  createdAt        DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  probability      Decimal?  @db.Decimal
  market           Market?   @relation(fields: [marketId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "predictions_market_id_markets_id_fk")

  @@index([createdAt], map: "idx_predictions_created_at")
  @@index([marketId], map: "idx_predictions_market_id")
  @@map("predictions")
}
